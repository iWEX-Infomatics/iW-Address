[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-09-20 17:24:54.740751",
  "module": "Validation",
  "name": "Item concatenation",
  "script": "frappe.ui.form.on('Item', {\r\n    onload(frm) {\r\n        if (frm.is_new()) {\r\n            frm.set_value(\"item_name\", \"\");\r\n        }\r\n    },\r\n    custom_item_name_combination(frm) {\r\n        if (frm.doc.custom_item_name_combination == 1) {\r\n            open_item_combination_dialog(frm);\r\n        }\r\n    },\r\n    custom_spice: update_fields,\r\n    custom_qty: update_fields,\r\n    custom_uom: update_fields,\r\n    custom_group_abbr: update_fields,\r\n    custom_packing_type: update_fields,\r\n    custom_packing_type_abbr: update_fields\r\n});\r\n\r\nfunction open_item_combination_dialog(frm) {\r\n    let dialog = new frappe.ui.Dialog({\r\n        title: 'Item Name Combination Setup',\r\n        size: 'large',\r\n        fields: [\r\n            {\r\n                fieldname: 'spices',\r\n                fieldtype: 'Link',\r\n                label: 'Select Spices',\r\n                options: 'Spices',\r\n                reqd: 1,\r\n                change: function() {\r\n                    let selected_spice = dialog.get_value('spices');\r\n                    if (selected_spice) {\r\n                        frm.set_value('custom_spice', selected_spice);\r\n                        update_fields(frm);\r\n                    }\r\n                }\r\n            },\r\n            { fieldtype: \"Column Break\" },\r\n            {\r\n                fieldname: 'qty',\r\n                fieldtype: 'Link',\r\n                label: 'Select Quantity',\r\n                options: 'Qty',\r\n                reqd: 1,\r\n                change: function() {\r\n                    let selected_qty = dialog.get_value('qty');\r\n                    if (selected_qty) {\r\n                        frm.set_value('custom_qty', selected_qty);\r\n                        update_fields(frm);\r\n                    }\r\n                }\r\n            },{ fieldtype: \"Section Break\" },\r\n            {\r\n                fieldname: 'uom',\r\n                fieldtype: 'Link',\r\n                label: 'Select UOM',\r\n                options: 'UOM',\r\n                reqd: 1,\r\n                change: function() {\r\n                    let selected_uom = dialog.get_value('uom');\r\n                    if (selected_uom) {\r\n                        frm.set_value('custom_uom', selected_uom);\r\n                        update_fields(frm);\r\n                    }\r\n                }\r\n            },\r\n            { fieldtype: \"Column Break\" },\r\n            {\r\n                fieldname: 'packing_type',\r\n                fieldtype: 'Link',\r\n                label: 'Select Packing Type',\r\n                options: 'Packing Type',\r\n                reqd: 1,\r\n                change: function() {\r\n                    let selected_packing = dialog.get_value('packing_type');\r\n                    if (selected_packing) {\r\n                        frm.set_value('custom_packing_type', selected_packing);\r\n                        update_fields(frm);\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        primary_action_label: 'Apply Selection',\r\n        primary_action(values) {\r\n            // Set all selected values to form\r\n            if (values.spices) frm.set_value('custom_spice', values.spices);\r\n            if (values.qty) frm.set_value('custom_qty', values.qty);\r\n            if (values.uom) frm.set_value('custom_uom', values.uom);\r\n            if (values.packing_type) frm.set_value('custom_packing_type', values.packing_type);\r\n            \r\n            // Trigger update function\r\n            update_fields(frm);\r\n            \r\n            dialog.hide();\r\n            // frappe.msgprint('Item name combination updated successfully!');\r\n        },\r\n        secondary_action_label: 'Cancel',\r\n        secondary_action() {\r\n            dialog.hide();\r\n        }\r\n    });\r\n    \r\n    // Pre-populate existing values if any\r\n    if (frm.doc.custom_spice) dialog.set_value('spices', frm.doc.custom_spice);\r\n    if (frm.doc.custom_qty) dialog.set_value('qty', frm.doc.custom_qty);\r\n    if (frm.doc.custom_uom) dialog.set_value('uom', frm.doc.custom_uom);\r\n    if (frm.doc.custom_packing_type) dialog.set_value('packing_type', frm.doc.custom_packing_type);\r\n    \r\n    dialog.show();\r\n}\r\n\r\nfunction update_fields(frm) {\r\n    if (frm.doc.custom_item_name_combination != 1) {\r\n        return;\r\n    }\r\n    const groupAbbr = (frm.doc.custom_group_abbr || \"\").trim();\r\n    const itemGroup = (frm.doc.item_group || \"\").trim().toLowerCase();\r\n    let spice = (frm.doc.custom_spice || \"\").trim();\r\n    const qty = (frm.doc.custom_qty || \"\").toString().trim();\r\n    const uom = (frm.doc.custom_uom || \"\").trim();\r\n    const packingType = (frm.doc.custom_packing_type || \"\").trim();\r\n    let packingAbbr = (frm.doc.custom_packing_type_abbr || \"\").trim();\r\n    \r\n    // Capitalize packing abbreviation\r\n    packingAbbr = capitalizeFirstLetter(packingAbbr);\r\n    \r\n    // Remove duplicate item group word from end of spice\r\n    if (spice && spice.toLowerCase().endsWith(itemGroup)) {\r\n        spice = spice.slice(0, -itemGroup.length).trim();\r\n    }\r\n    \r\n    // If nothing is provided, reset fields\r\n    if (!(groupAbbr || spice || qty || uom || packingAbbr)) {\r\n        frm.set_value(\"item_name\", \"\");\r\n        frm.set_value(\"description\", \"\");\r\n        return;\r\n    }\r\n    \r\n    // --- Build Item Name ---\r\n    const itemNameParts = [];\r\n    if (groupAbbr) itemNameParts.push(groupAbbr);\r\n    if (spice) itemNameParts.push(spice);\r\n    if (qty || uom) itemNameParts.push(`${qty}${uom}`.trim());\r\n    if (packingAbbr) itemNameParts.push(packingAbbr);\r\n    const itemName = itemNameParts.filter(Boolean).join(\" - \");\r\n    \r\n    // --- Build Description ---\r\n    const descParts = [];\r\n    if (spice) descParts.push(spice);\r\n    if (qty || uom) descParts.push(`${qty}${uom}`.trim());\r\n    if (packingType) descParts.push(packingType);\r\n    const description = descParts.filter(Boolean).join(\" \").replace(/\\s+/g, \" \").trim();\r\n    \r\n    frm.set_value(\"item_name\", itemName);\r\n    frm.set_value(\"description\", description);\r\n}\r\n\r\nfunction capitalizeFirstLetter(str) {\r\n    if (!str) return \"\";\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-07-30 20:18:21.907523",
  "module": "Validation",
  "name": "Autofill Item Code",
  "script": "frappe.ui.form.on('Item', {\r\n    onload: function(frm) {\r\n        // Check if it's a new item, custom_group_abbr is not empty, and item_group is \"Selling Items\"\r\n        if (frm.is_new() && frm.doc.custom_group_abbr && frm.doc.item_group === \"Selling Items\") {\r\n            generate_item_code(frm);\r\n        }\r\n    },\r\n\r\n    item_group: function(frm) {\r\n        // When item group changes, regenerate item code if conditions are met\r\n        if (frm.doc.custom_group_abbr && frm.doc.item_group === \"Selling Items\") {\r\n            generate_item_code(frm);\r\n        }\r\n    },\r\n    \r\n    item_name: function(frm) {\r\n        // When item group changes, regenerate item code if conditions are met\r\n        if (frm.doc.custom_group_abbr && frm.doc.item_group === \"Selling Items\") {\r\n            generate_item_code(frm);\r\n        }\r\n    },\r\n\r\n    custom_group_abbr: function(frm) {\r\n        // When custom_group_abbr changes, regenerate item code if conditions are met\r\n        if (frm.doc.custom_group_abbr && frm.doc.item_group === \"Selling Items\") {\r\n            generate_item_code(frm);\r\n        }\r\n    }\r\n});\r\n\r\nfunction generate_item_code(frm) {\r\n    let abbr = frm.doc.custom_group_abbr;\r\n\r\n    // Safety check: if not \"Selling Items\", don't proceed\r\n    if (!abbr || frm.doc.item_group !== \"Selling Items\") return;\r\n\r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Item\",\r\n            filters: [\r\n                [\"item_code\", \"like\", abbr + \"-%\"]\r\n            ],\r\n            fields: [\"item_code\"],\r\n            order_by: \"item_code desc\",\r\n            limit_page_length: 1\r\n        },\r\n        callback: function(r) {\r\n            let new_sequence = \"001\";  // Default starting sequence\r\n\r\n            if (r.message && r.message.length > 0) {\r\n                let last_item_code = r.message[0].item_code;\r\n                let last_sequence = last_item_code.split('-')[1];\r\n                let next_sequence = parseInt(last_sequence) + 1;\r\n                new_sequence = String(next_sequence).padStart(3, '0');\r\n            }\r\n\r\n            let new_item_code = `${abbr}-${new_sequence}`;\r\n\r\n            // First set item_code\r\n            frm.set_value('item_code', new_item_code).then(() => {\r\n                // Then blank item_name\r\n                frm.set_value('item_name', \"\");\r\n            });\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Permission for Page and Report",
  "enabled": 1,
  "modified": "2025-07-30 18:14:19.831294",
  "module": "Validation",
  "name": "Role Perm",
  "script": "frappe.ui.form.on('Role Permission for Page and Report', {\n  page:function(frm) {\n    if(frm.doc.roles.length < 1){\n            frm.clear_custom_buttons();\n        frm.page.clear_actions();\n    }\n  },\n  update_report_page_data: function (frm) {\n        if (frm.doc.page == \"backups\"){\n            frm.clear_custom_buttons();\n        frm.page.clear_actions();\n        frm.set_query('page', function() {\n            return {\n                filters: [\n                    ['name', '!=', 'backups']\n                    ['name', '!=', 'permission-manager']\n                ]\n            };\n        });\n    }}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2025-08-26 10:07:53.520487",
  "module": "Validation",
  "name": "Customer Group",
  "script": "frappe.ui.form.on('Customer', {\r\n    // Trigger on form load\r\n    onload: function(frm) {\r\n        set_customer_group_if_individual(frm);\r\n        set_tax_category_based_on_territory(frm);\r\n        set_default_accounts_and_credit_limits(frm);\r\n    },\r\n    \r\n    // Trigger when customer_type field changes\r\n    customer_type: function(frm) {\r\n        set_customer_group_if_individual(frm);\r\n        set_tax_category_based_on_territory(frm);\r\n        set_default_accounts_and_credit_limits(frm);\r\n    },\r\n    \r\n    // Trigger when territory field changes\r\n    territory: function(frm) {\r\n        set_tax_category_based_on_territory(frm);\r\n    },\r\n    \r\n    // Mobile number validation\r\n    custom_mobile: function(frm) {\r\n        validate_mobile_number(frm);\r\n    },\r\n    \r\n    // Validate before save\r\n    validate: function(frm) {\r\n        validate_mobile_number(frm);\r\n    }\r\n});\r\n\r\nfunction set_customer_group_if_individual(frm) {\r\n    if (frm.doc.customer_type === 'Individual') {\r\n        frm.set_value('customer_group', 'Individual');\r\n    }\r\n}\r\n\r\nfunction set_tax_category_based_on_territory(frm) {\r\n    if (frm.doc.customer_type === 'Individual' && frm.doc.territory) {\r\n        // Check if territory is under Kerala\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'Territory',\r\n                name: frm.doc.territory\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    check_territory_hierarchy(frm, r.message);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction check_territory_hierarchy(frm, territory_doc) {\r\n    // If current territory is Kerala, set In-State\r\n    if (territory_doc.name === 'Kerala') {\r\n        frm.set_value('tax_category', 'In-State');\r\n        return;\r\n    }\r\n    \r\n    // If territory has a parent, check the parent recursively\r\n    if (territory_doc.parent_territory && territory_doc.parent_territory !== 'All Territories') {\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'Territory',\r\n                name: territory_doc.parent_territory\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    if (r.message.name === 'Kerala') {\r\n                        frm.set_value('tax_category', 'In-State');\r\n                    } else if (r.message.parent_territory && r.message.parent_territory !== 'All Territories') {\r\n                        // Continue checking up the hierarchy\r\n                        check_territory_hierarchy(frm, r.message);\r\n                    } else {\r\n                        // Reached top level without finding Kerala\r\n                        frm.set_value('tax_category', 'Out-State');\r\n                    }\r\n                } else {\r\n                    frm.set_value('tax_category', 'Out-State');\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        // No parent or reached top level, set Out-State\r\n        frm.set_value('tax_category', 'Out-State');\r\n    }\r\n}\r\n\r\nfunction set_default_accounts_and_credit_limits(frm) {\r\n    if (frm.doc.customer_type === 'Individual') {\r\n        // Auto-fill accounts child table\r\n        set_default_accounts(frm);\r\n        \r\n        // Auto-fill credit_limits child table\r\n        set_default_credit_limits(frm);\r\n    }\r\n}\r\n\r\nfunction set_default_accounts(frm) {\r\n    // Check if accounts table is empty or doesn't have the required entry\r\n    let company = \"Auraspace Traders Pvt Ltd\";\r\n    let account = \"Debtors INR - AT\";\r\n    \r\n    let existing_row = frm.doc.accounts.find(row => \r\n        row.company === company && row.account === account\r\n    );\r\n    \r\n    if (!existing_row) {\r\n        // Check if there's an empty row or create new one\r\n        let empty_row = frm.doc.accounts.find(row => !row.company && !row.account);\r\n        \r\n        if (empty_row) {\r\n            // Fill the empty row\r\n            frappe.model.set_value(empty_row.doctype, empty_row.name, 'company', company);\r\n            frappe.model.set_value(empty_row.doctype, empty_row.name, 'account', account);\r\n        } else {\r\n            // Add new row\r\n            let new_row = frm.add_child('accounts');\r\n            new_row.company = company;\r\n            new_row.account = account;\r\n        }\r\n        \r\n        frm.refresh_field('accounts');\r\n    }\r\n}\r\n\r\nfunction set_default_credit_limits(frm) {\r\n    // Check if credit_limits table is empty or doesn't have the required entry\r\n    let company = \"Auraspace Traders Pvt Ltd\";\r\n    \r\n    let existing_row = frm.doc.credit_limits.find(row => row.company === company);\r\n    \r\n    if (!existing_row) {\r\n        // Check if there's an empty row or create new one\r\n        let empty_row = frm.doc.credit_limits.find(row => !row.company);\r\n        \r\n        if (empty_row) {\r\n            // Fill the empty row\r\n            frappe.model.set_value(empty_row.doctype, empty_row.name, 'company', company);\r\n        } else {\r\n            // Add new row\r\n            let new_row = frm.add_child('credit_limits');\r\n            new_row.company = company;\r\n        }\r\n        \r\n        frm.refresh_field('credit_limits');\r\n    }\r\n}\r\n\r\n// Mobile number validation function\r\nfunction validate_mobile_number(frm) {\r\n    if (frm.doc.customer_type === 'Individual' && frm.doc.custom_mobile) {\r\n        let mobile = String(frm.doc.custom_mobile);\r\n        \r\n        // Remove any spaces, hyphens, or other non-digit characters\r\n        mobile = mobile.replace(/\\D/g, '');\r\n        \r\n        // Check if it's exactly 10 digits\r\n        if (mobile.length !== 10) {\r\n            frappe.msgprint({\r\n                title: __('Invalid Mobile Number'),\r\n                indicator: 'red',\r\n                message: __('Mobile number must be exactly 10 digits for Individual customers.')\r\n            });\r\n            frm.set_focus('custom_mobile');\r\n            // Clear invalid value or keep it for user to correct\r\n            // frm.set_value('custom_mobile', '');\r\n            return false;\r\n        }\r\n        \r\n        // Check if it starts with valid Indian mobile prefixes (optional)\r\n        let validPrefixes = ['6', '7', '8', '9'];\r\n        if (!validPrefixes.includes(mobile[0])) {\r\n            frappe.msgprint({\r\n                title: __('Invalid Mobile Number'),\r\n                indicator: 'orange',\r\n                message: __('Mobile number should start with 6, 7, 8, or 9 for Indian numbers.')\r\n            });\r\n            frm.set_focus('custom_mobile');\r\n            return false;\r\n        }\r\n        \r\n        // If validation passes, update the field with clean number\r\n        if (String(frm.doc.custom_mobile) !== mobile) {\r\n            frm.set_value('custom_mobile', parseInt(mobile));\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    return true;\r\n}",
  "view": "Form"
 }
]