[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2025-08-05 11:20:27.995221",
  "module": "Validation",
  "name": "Customer",
  "script": "frappe.ui.form.on('Customer', {\r\n    onload(frm) {\r\n        // Set the account_manager to the current user when creating a new Customer\r\n        if (frm.is_new()) {\r\n            frm.set_value(\"account_manager\", frappe.session.user);\r\n        }\r\n    },\r\n\r\n    refresh(frm) {\r\n        // Trigger updates when default_currency changes\r\n        frm.set_df_property('default_currency', 'change', () => update_customer_defaults(frm));\r\n    },\r\n\r\n    default_currency(frm) {\r\n        update_customer_defaults(frm);\r\n    }\r\n});\r\n\r\nfunction update_customer_defaults(frm) {\r\n    // Only proceed if default_currency is set\r\n    if (!frm.doc.default_currency) return;\r\n\r\n    // For INR currency\r\n    if (frm.doc.default_currency === \"INR\") {\r\n        frm.set_value(\"default_price_list\", \"INR Selling\");\r\n        update_accounts_table(frm, \"Auraspace Traders Pvt Ltd\", \"Debtors INR - AT\");\r\n    }\r\n    // For USD currency\r\n    else if (frm.doc.default_currency === \"USD\") {\r\n        frm.set_value(\"default_price_list\", \"USD Selling\");\r\n        update_accounts_table(frm, \"Auraspace Traders Pvt Ltd\", \"Debtors USD - AT\");\r\n    }\r\n    // Clear fields if currency is neither INR nor USD\r\n    else {\r\n        frm.set_value(\"default_price_list\", \"\");\r\n        clear_accounts_table(frm);\r\n    }\r\n}\r\n\r\nfunction update_accounts_table(frm, company, account) {\r\n    // Initialize accounts table if empty\r\n    if (!frm.doc.accounts) {\r\n        frm.doc.accounts = [];\r\n    }\r\n\r\n    // Find existing entry for the company\r\n    let account_row = frm.doc.accounts.find(row => row.company === company);\r\n\r\n    // Update or add the account entry\r\n    if (account_row) {\r\n        account_row.account = account;\r\n    } else {\r\n        frm.add_child(\"accounts\", {\r\n            company: company,\r\n            account: account\r\n        });\r\n    }\r\n\r\n    frm.refresh_field(\"accounts\");\r\n}\r\n\r\nfunction clear_accounts_table(frm) {\r\n    if (frm.doc.accounts && frm.doc.accounts.length > 0) {\r\n        frm.clear_table(\"accounts\");\r\n        frm.refresh_field(\"accounts\");\r\n    }\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-07-30 18:15:04.859410",
  "module": "Validation",
  "name": "Item concatenation",
  "script": "frappe.ui.form.on('Item', {\r\n    onload(frm) {\r\n        if (frm.is_new()) {\r\n            frm.set_value(\"item_name\", \"\");\r\n        }\r\n    },\r\n    custom_spice: update_fields,\r\n    custom_qty: update_fields,\r\n    custom_uom: update_fields,\r\n    custom_group_abbr: update_fields,\r\n    custom_packing_type: update_fields,\r\n    custom_packing_type_abbr: update_fields\r\n});\r\n\r\nfunction update_fields(frm) {\r\n    // Only proceed if custom_item_name_combination == 1\r\n    if (frm.doc.custom_item_name_combination != 1) {\r\n        return;\r\n    }\r\n\r\n    const groupAbbr = frm.doc.custom_group_abbr || \"\";\r\n    const itemGroup = (frm.doc.item_group || \"\").trim().toLowerCase();\r\n    let spice = (frm.doc.custom_spice || \"\").trim();\r\n    const qty = frm.doc.custom_qty || \"\";\r\n    const uom = frm.doc.custom_uom || \"\";\r\n    const packingType = frm.doc.custom_packing_type || \"\";\r\n    let packingAbbr = frm.doc.custom_packing_type_abbr || \"\";\r\n\r\n    packingAbbr = capitalizeFirstLetter(packingAbbr);\r\n\r\n    if (spice.toLowerCase().endsWith(itemGroup)) {\r\n        spice = spice.slice(0, -itemGroup.length).trim(); // remove 'honey' from end\r\n    }\r\n\r\n    const hasValues = groupAbbr || spice || qty || uom || packingAbbr;\r\n    if (!hasValues) {\r\n        frm.set_value(\"item_name\", \"\");\r\n        frm.set_value(\"description\", \"\");\r\n        return;\r\n    }\r\n\r\n    let itemName = `${groupAbbr}`;\r\n    if (spice) itemName += ` - ${spice}`;\r\n    itemName += ` - ${qty}${uom} ${packingAbbr}`;\r\n\r\n    const description = `${frm.doc.custom_spice || \"\"} ${qty}${uom} ${packingType}`.replace(/\\s+/g, ' ').trim();\r\n\r\n    frm.set_value(\"item_name\", itemName.replace(/\\s+/g, ' ').trim());\r\n    frm.set_value(\"description\", description);\r\n}\r\n\r\nfunction capitalizeFirstLetter(str) {\r\n    if (!str) return '';\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-07-30 20:18:21.907523",
  "module": "Validation",
  "name": "Autofill Item Code",
  "script": "frappe.ui.form.on('Item', {\r\n    onload: function(frm) {\r\n        // Check if it's a new item, custom_group_abbr is not empty, and item_group is \"Selling Items\"\r\n        if (frm.is_new() && frm.doc.custom_group_abbr && frm.doc.item_group === \"Selling Items\") {\r\n            generate_item_code(frm);\r\n        }\r\n    },\r\n\r\n    item_group: function(frm) {\r\n        // When item group changes, regenerate item code if conditions are met\r\n        if (frm.doc.custom_group_abbr && frm.doc.item_group === \"Selling Items\") {\r\n            generate_item_code(frm);\r\n        }\r\n    },\r\n    \r\n    item_name: function(frm) {\r\n        // When item group changes, regenerate item code if conditions are met\r\n        if (frm.doc.custom_group_abbr && frm.doc.item_group === \"Selling Items\") {\r\n            generate_item_code(frm);\r\n        }\r\n    },\r\n\r\n    custom_group_abbr: function(frm) {\r\n        // When custom_group_abbr changes, regenerate item code if conditions are met\r\n        if (frm.doc.custom_group_abbr && frm.doc.item_group === \"Selling Items\") {\r\n            generate_item_code(frm);\r\n        }\r\n    }\r\n});\r\n\r\nfunction generate_item_code(frm) {\r\n    let abbr = frm.doc.custom_group_abbr;\r\n\r\n    // Safety check: if not \"Selling Items\", don't proceed\r\n    if (!abbr || frm.doc.item_group !== \"Selling Items\") return;\r\n\r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Item\",\r\n            filters: [\r\n                [\"item_code\", \"like\", abbr + \"-%\"]\r\n            ],\r\n            fields: [\"item_code\"],\r\n            order_by: \"item_code desc\",\r\n            limit_page_length: 1\r\n        },\r\n        callback: function(r) {\r\n            let new_sequence = \"001\";  // Default starting sequence\r\n\r\n            if (r.message && r.message.length > 0) {\r\n                let last_item_code = r.message[0].item_code;\r\n                let last_sequence = last_item_code.split('-')[1];\r\n                let next_sequence = parseInt(last_sequence) + 1;\r\n                new_sequence = String(next_sequence).padStart(3, '0');\r\n            }\r\n\r\n            let new_item_code = `${abbr}-${new_sequence}`;\r\n\r\n            // First set item_code\r\n            frm.set_value('item_code', new_item_code).then(() => {\r\n                // Then blank item_name\r\n                frm.set_value('item_name', \"\");\r\n            });\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Permission for Page and Report",
  "enabled": 1,
  "modified": "2025-07-30 18:14:19.831294",
  "module": "Validation",
  "name": "Role Perm",
  "script": "frappe.ui.form.on('Role Permission for Page and Report', {\n  page:function(frm) {\n    if(frm.doc.roles.length < 1){\n            frm.clear_custom_buttons();\n        frm.page.clear_actions();\n    }\n  },\n  update_report_page_data: function (frm) {\n        if (frm.doc.page == \"backups\"){\n            frm.clear_custom_buttons();\n        frm.page.clear_actions();\n        frm.set_query('page', function() {\n            return {\n                filters: [\n                    ['name', '!=', 'backups']\n                    ['name', '!=', 'permission-manager']\n                ]\n            };\n        });\n    }}\n});",
  "view": "Form"
 }
]